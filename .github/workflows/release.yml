name: Prepare Release

on: [workflow_dispatch]

permissions:
  actions: none
  checks: none
  contents: none
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none

env:
  python-version: "3.12"

jobs:
  verify-branch-state:
    name: Validate direct merge to Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # forcing full checkout for branch access
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}
      - name: Check for clean merge
        run: |
          git checkout release
          # verify this is a fast-forward only merge
          git merge --ff-only ${{ github.ref_name }}

  linux:
    name: Test Linux
    if: github.repository_owner == 'NVIDIA' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/test_linux.yml
  windows:
    name: Test Windows
    if: github.repository_owner == 'NVIDIA' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/test_windows.yml
  macos:
    name: Test MacOS
    if: github.repository_owner == 'NVIDIA' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/test_macos.yml
  package_test:
    name: Test Git Packaging
    if: github.repository_owner == 'NVIDIA' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/remote_package_install.yml

  release-prepare:
    name: Prepare Pypi package
    needs: [verify-branch-state, linux, windows, macos, package_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}

      - name: Reduce disk usage
        run: |
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir flit
          python -m pip cache purge

      - name: Determine version
        id: version
        run: |
          VERSION=`python ./.github/scripts/bump_version.py`
          make -C docs/source cliref
          git add pyproject.toml garak/__init__.py docs/source/cliref.rst
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Build package
        run: |
          python -m flit build

      - name: Test package install
        run: |
          pip install --no-cache-dir dist/garak-${VERSION}.tar.gz

      - name: archive results
        uses: actions/upload-artifact@v4
        with:
          name: garak-${{ steps.version.outputs.version }}.tar.gz
          path: |
            ./dist/garak-*.tar.gz